diff -urN a/src/core/ngx_connection.c b/src/core/ngx_connection.c
--- a/src/core/ngx_connection.c	2018-12-04 23:52:24.000000000 +0900
+++ b/src/core/ngx_connection.c	2019-04-26 15:03:40.194987090 +0900
@@ -1037,6 +1037,10 @@
     ngx_event_t       *rev, *wev;
     ngx_connection_t  *c;
 
+#if (NGX_STAT_EXTENDED)
+    conn_score        *cs;
+#endif
+
     /* disable warning: Win32 SOCKET is u_int while UNIX socket is int */
 
     if (ngx_cycle->files && (ngx_uint_t) s >= ngx_cycle->files_n) {
@@ -1072,8 +1076,17 @@
     rev = c->read;
     wev = c->write;
 
+#if (NGX_STAT_EXTENDED)
+    cs = c->cs;
+    cs->last_used = (time_t) 0 ;
+#endif
+
     ngx_memzero(c, sizeof(ngx_connection_t));
 
+#if (NGX_STAT_EXTENDED)
+    c->cs = cs;
+#endif
+
     c->read = rev;
     c->write = wev;
     c->fd = s;
@@ -1210,7 +1223,7 @@
         ngx_queue_remove(&c->queue);
         ngx_cycle->reusable_connections_n--;
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_waiting, -1);
 #endif
     }
@@ -1224,7 +1237,7 @@
             (ngx_queue_t *) &ngx_cycle->reusable_connections_queue, &c->queue);
         ngx_cycle->reusable_connections_n++;
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_waiting, 1);
 #endif
     }
diff -urN a/src/core/ngx_connection.h b/src/core/ngx_connection.h
--- a/src/core/ngx_connection.h	2018-12-04 23:52:24.000000000 +0900
+++ b/src/core/ngx_connection.h	2019-04-26 15:03:40.194987090 +0900
@@ -119,6 +119,11 @@
 
 
 struct ngx_connection_s {
+
+#if 1 // (NGX_STAT_EXTENDED)
+    void               *cs;
+#endif
+
     void               *data;
     ngx_event_t        *read;
     ngx_event_t        *write;
diff -urN a/src/event/ngx_event.c b/src/event/ngx_event.c
--- a/src/event/ngx_event.c	2018-12-04 23:52:24.000000000 +0900
+++ b/src/event/ngx_event.c	2019-04-26 15:19:28.737052202 +0900
@@ -57,7 +57,7 @@
 ngx_int_t             ngx_accept_disabled;
 
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
 
 static ngx_atomic_t   ngx_stat_accepted0;
 ngx_atomic_t         *ngx_stat_accepted = &ngx_stat_accepted0;
@@ -76,7 +76,28 @@
 
 #endif
 
+#if (NGX_STAT_EXTENDED)
 
+ngx_atomic_t   ngx_stat_ssl_handshakes0 ;
+ngx_atomic_t  *ngx_stat_ssl_handshakes = &ngx_stat_ssl_handshakes0 ;
+
+ngx_atomic_t   ngx_stat_reused_sessions0 ;
+ngx_atomic_t  *ngx_stat_reused_sessions = &ngx_stat_reused_sessions0 ;
+
+ngx_atomic_t   ngx_stat_session_cache_hits0 ;
+ngx_atomic_t  *ngx_stat_session_cache_hits = &ngx_stat_session_cache_hits0 ;
+
+ngx_atomic_t   ngx_stat_session_cache_misses0 ;
+ngx_atomic_t  *ngx_stat_session_cache_misses = &ngx_stat_session_cache_misses0 ;
+
+
+ngx_uint_t      ngx_num_workers;
+size_t          shm_size = 0;
+worker_score   *workers;
+conn_score     *conns;
+worker_score   *my_worker;
+
+#endif
 
 static ngx_command_t  ngx_events_commands[] = {
 
@@ -327,6 +348,35 @@
     return NGX_OK;
 }
 
+#if (NGX_STAT_EXTENDED)
+
+static void
+init_request_cnt(request_cnt *recent_request_cnt)
+{
+    ngx_uint_t  i;
+
+    for (i = 0; i < RECENT_PERIOD; i++) {
+        recent_request_cnt[i].time = 0;
+        recent_request_cnt[i].cnt = 0;
+    }
+}
+
+
+static void
+init_workers(worker_score *workers)
+{
+    worker_score  *ws;
+    ngx_uint_t  i;
+
+    for (i = 0; i < ngx_num_workers; i++)
+    {
+        ws = (worker_score *)((char *) workers + WORKER_SCORE_LEN * i);
+
+        init_request_cnt(ws->recent_request_cnt);
+    }
+}
+
+#endif
 
 ngx_int_t
 ngx_handle_write_event(ngx_event_t *wev, size_t lowat)
@@ -475,7 +525,15 @@
     }
 
     if (ngx_accept_mutex_ptr) {
+
+#if (NGX_STAT_EXTENDED)
+        shm.addr = (u_char *) ngx_accept_mutex_ptr;
+        shm.size = shm_size;
+        ngx_shm_free(&shm);
+#else
         return NGX_OK;
+#endif
+
     }
 
 
@@ -487,7 +545,7 @@
            + cl          /* ngx_connection_counter */
            + cl;         /* ngx_temp_number */
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
 
     size += cl           /* ngx_stat_accepted */
            + cl          /* ngx_stat_handled */
@@ -499,6 +557,25 @@
 
 #endif
 
+#if (NGX_STAT_EXTENDED)
+
+    size += cl ;         /* ngx_stat_ssl_handshakes  */
+    size += cl ;         /* ngx_stat_reused_sessions */
+    size += cl ;         /* ngx_stat_session_cache_hits */
+    size += cl ;         /* ngx_stat_session_cache_misses */
+
+    if (WORKER_SCORE_LEN < sizeof(worker_score)) {
+        ngx_log_error(NGX_LOG_EMERG, cycle->log, 0, "worker_score(%d) too large", sizeof(worker_score ));
+        return NGX_ERROR;
+    }
+
+    size += (WORKER_SCORE_LEN * ccf->worker_processes)
+        + (sizeof(conn_score) * ccf->worker_processes * cycle->connection_n);
+
+    shm_size = size;
+
+#endif
+
     shm.size = size;
     ngx_str_set(&shm.name, "nginx_shared_zone");
     shm.log = cycle->log;
@@ -533,7 +610,7 @@
 
     ngx_random_number = (tp->msec << 16) + ngx_pid;
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
 
     ngx_stat_accepted = (ngx_atomic_t *) (shared + 3 * cl);
     ngx_stat_handled = (ngx_atomic_t *) (shared + 4 * cl);
@@ -545,6 +622,23 @@
 
 #endif
 
+#if (NGX_STAT_EXTENDED)
+
+    ngx_stat_waiting = (ngx_atomic_t *) (shared + 9 * cl);
+    ngx_stat_ssl_handshakes = (ngx_atomic_t *) (shared + 10 * cl);
+    ngx_stat_reused_sessions = (ngx_atomic_t *) (shared + 11 * cl);
+    ngx_stat_session_cache_hits = (ngx_atomic_t *) (shared + 12 * cl);
+    ngx_stat_session_cache_misses = (ngx_atomic_t *) (shared + 13 * cl);
+
+    ngx_num_workers = ccf->worker_processes;
+
+    workers = (worker_score *) (shared + 14 * cl);
+    init_workers(workers);
+
+    conns = (conn_score *) (shared + 14 * cl + ccf->worker_processes * WORKER_SCORE_LEN);
+
+#endif
+
     return NGX_OK;
 }
 
@@ -688,6 +782,32 @@
 
     c = cycle->connections;
 
+#if (NGX_STAT_EXTENDED)
+    {
+        conn_score  *cs;
+        ngx_uint_t    i;
+
+        for (i = 0; i < cycle->connection_n; i++)
+        {
+            c [i].cs = (void *) ((char *) conns +
+                                 sizeof(conn_score) * (ngx_process_slot * cycle->connection_n + i));
+            cs = (conn_score *) c[i].cs;
+
+            cs->bytes_sent = 0;
+            cs->response_time = 0;
+            cs->upstream_response_time = -1;
+            cs->request[0] = '\0';
+            cs->client[0] = '\0';
+            cs->vhost[0] = '\0';
+
+            cs->last_used = 0 ;
+            cs->status = 0;
+            cs->zin = 0;
+            cs->zout = 0;
+        }
+    }
+#endif
+
     cycle->read_events = ngx_alloc(sizeof(ngx_event_t) * cycle->connection_n,
                                    cycle->log);
     if (cycle->read_events == NULL) {
diff -urN a/src/event/ngx_event.h b/src/event/ngx_event.h
--- a/src/event/ngx_event.h	2018-12-04 23:52:24.000000000 +0900
+++ b/src/event/ngx_event.h	2019-04-26 15:03:40.194987090 +0900
@@ -8,6 +8,9 @@
 #ifndef _NGX_EVENT_H_INCLUDED_
 #define _NGX_EVENT_H_INCLUDED_
 
+#if (NGX_STAT_EXTENDED)
+#include <sys/times.h>
+#endif
 
 #include <ngx_config.h>
 #include <ngx_core.h>
@@ -475,7 +478,7 @@
 extern ngx_int_t              ngx_accept_disabled;
 
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
 
 extern ngx_atomic_t  *ngx_stat_accepted;
 extern ngx_atomic_t  *ngx_stat_handled;
@@ -487,6 +490,62 @@
 
 #endif
 
+#if (NGX_STAT_EXTENDED)
+
+extern ngx_atomic_t  *ngx_stat_ssl_handshakes ;
+extern ngx_atomic_t  *ngx_stat_reused_sessions ;
+extern ngx_atomic_t  *ngx_stat_session_cache_hits ;
+extern ngx_atomic_t  *ngx_stat_session_cache_misses ;
+
+#define  SCORE__REQUEST_LEN           128
+#define  SCORE__CLIENT_LEN             32
+#define  SCORE__VHOST_LEN              32
+
+#define  CL_SIZE                      128
+#define  WORKER_SCORE_LEN             640      /* 128 X 5 */
+
+#define  SERVER_READY                 '-'
+#define  SERVER_READING               'R'
+#define  SERVER_SENDING               'W'
+#define  SERVER_LOGGING               'L'
+
+#define  RECENT_PERIOD                64
+#define  RECENT_MASK          0x0000003F
+
+typedef struct {
+    uint32_t  time;
+    uint32_t  cnt;
+} request_cnt;
+
+typedef struct {
+    request_cnt     recent_request_cnt[RECENT_PERIOD];
+    struct  tms     times;
+    time_t          last_used;
+    ngx_uint_t      bytes_sent;
+    ngx_uint_t      access_count;
+    ngx_pid_t       pid;
+    ngx_uint_t      active_conn ;
+    char            mode;
+} worker_score;
+
+typedef struct {
+    u_char  request[SCORE__REQUEST_LEN];
+    u_char  client[SCORE__CLIENT_LEN];
+    u_char  vhost[SCORE__VHOST_LEN];
+    time_t          last_used;
+    ngx_uint_t      bytes_sent;
+    ngx_msec_int_t  response_time;
+    ngx_msec_int_t  upstream_response_time;
+    ngx_uint_t      status;
+    size_t          zin;
+    size_t          zout;
+} conn_score;
+
+extern  worker_score  *workers;
+extern  worker_score  *my_worker;
+extern  conn_score    *conns;
+
+#endif
 
 #define NGX_UPDATE_TIME         1
 #define NGX_POST_EVENTS         2
diff -urN a/src/event/ngx_event_accept.c b/src/event/ngx_event_accept.c
--- a/src/event/ngx_event_accept.c	2018-12-04 23:52:24.000000000 +0900
+++ b/src/event/ngx_event_accept.c	2019-04-26 15:03:40.194987090 +0900
@@ -134,7 +134,7 @@
             return;
         }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB|| NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_accepted, 1);
 #endif
 
@@ -154,10 +154,14 @@
 
         c->type = SOCK_STREAM;
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB|| NGX_STAT_EXTENDED )
         (void) ngx_atomic_fetch_add(ngx_stat_active, 1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+        my_worker->active_conn += 1 ;
+#endif
+
         c->pool = ngx_create_pool(ls->pool_size, ev->log);
         if (c->pool == NULL) {
             ngx_close_accepted_connection(c);
@@ -261,7 +265,7 @@
 
         c->number = ngx_atomic_fetch_add(ngx_connection_counter, 1);
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_handled, 1);
 #endif
 
@@ -420,7 +424,7 @@
             return;
         }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_accepted, 1);
 #endif
 
@@ -460,10 +464,14 @@
             sa.sockaddr.sa_family = ls->sockaddr->sa_family;
         }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_active, 1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+        my_worker->active_conn += 1 ;
+#endif
+
         c->pool = ngx_create_pool(ls->pool_size, ev->log);
         if (c->pool == NULL) {
             ngx_close_accepted_connection(c);
@@ -600,7 +608,7 @@
 
         c->number = ngx_atomic_fetch_add(ngx_connection_counter, 1);
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_handled, 1);
 #endif
 
@@ -777,9 +785,17 @@
         ngx_destroy_pool(c->pool);
     }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
 #endif
+
+#if (NGX_STAT_EXTENDED)
+    if ( 0 < my_worker->active_conn )
+        my_worker->active_conn -= 1 ;
+    else
+        ngx_log_error( NGX_LOG_EMERG, c->log, 0,
+                       "ngx_close_accepted_connection(): active_conn is zero" ) ;
+#endif
 }
 
 
diff -urN a/src/event/ngx_event_openssl.c b/src/event/ngx_event_openssl.c
--- a/src/event/ngx_event_openssl.c	2018-12-04 23:52:24.000000000 +0900
+++ b/src/event/ngx_event_openssl.c	2019-04-26 15:03:40.194987090 +0900
@@ -1253,6 +1253,14 @@
             return NGX_ERROR;
         }
 
+#if (NGX_STAT_EXTENDED)
+        (void) ngx_atomic_fetch_add( ngx_stat_ssl_handshakes, 1 ) ;
+        if ( SSL_session_reused( c->ssl->connection ) )
+        {
+            (void) ngx_atomic_fetch_add( ngx_stat_reused_sessions, 1 ) ;
+        }
+#endif
+
 #if (NGX_DEBUG)
         {
         char         buf[129], *s, *d;
@@ -2692,6 +2700,16 @@
                 p = buf;
                 sess = d2i_SSL_SESSION(NULL, &p, sess_id->len);
 
+#if (NGX_STAT_EXTENDED)
+                if ( NULL == sess )
+                {
+                    (void) ngx_atomic_fetch_add(ngx_stat_session_cache_misses, 1);
+                }
+                else
+                {
+                    (void) ngx_atomic_fetch_add(ngx_stat_session_cache_hits, 1);
+                }
+#endif
                 return sess;
             }
 
@@ -2717,6 +2735,17 @@
 
     ngx_shmtx_unlock(&shpool->mutex);
 
+#if (NGX_STAT_EXTENDED)
+    if ( NULL == sess )
+    {
+        (void) ngx_atomic_fetch_add(ngx_stat_session_cache_misses, 1);
+    }
+    else
+    {
+        (void) ngx_atomic_fetch_add(ngx_stat_session_cache_hits, 1);
+    }
+#endif
+
     return sess;
 }
 
diff -urN a/src/http/modules/ngx_http_gzip_filter_module.c b/src/http/modules/ngx_http_gzip_filter_module.c
--- a/src/http/modules/ngx_http_gzip_filter_module.c	2018-12-04 23:52:24.000000000 +0900
+++ b/src/http/modules/ngx_http_gzip_filter_module.c	2019-04-26 15:03:40.184987042 +0900
@@ -1012,6 +1012,18 @@
 
     r->connection->buffered &= ~NGX_HTTP_GZIP_BUFFERED;
 
+#if (NGX_STAT_EXTENDED)
+    {
+        conn_score  *cs = r->connection->cs;
+
+        ngx_log_error(NGX_LOG_NOTICE, ctx->request->connection->log, 0,
+                      "gzip raio [%ud:%ud]", ctx->zin, ctx->zout ) ;
+
+        cs->zin = ctx->zin;
+        cs->zout = ctx->zout;
+    }
+#endif
+
     return NGX_OK;
 }
 
diff -urN a/src/http/ngx_http_request.c b/src/http/ngx_http_request.c
--- a/src/http/ngx_http_request.c	2018-12-04 23:52:24.000000000 +0900
+++ b/src/http/ngx_http_request.c	2019-04-26 15:03:40.183987037 +0900
@@ -620,12 +620,16 @@
     ctx->current_request = r;
     r->log_handler = ngx_http_log_error_handler;
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_reading, 1);
     r->stat_reading = 1;
     (void) ngx_atomic_fetch_add(ngx_stat_requests, 1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+    my_worker->mode = SERVER_READING;
+#endif
+
     return r;
 }
 
@@ -1938,13 +1942,17 @@
         ngx_del_timer(c->read);
     }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_reading, -1);
     r->stat_reading = 0;
     (void) ngx_atomic_fetch_add(ngx_stat_writing, 1);
     r->stat_writing = 1;
 #endif
 
+#if (NGX_STAT_EXTENDED)
+    my_worker->mode = SERVER_SENDING ;
+#endif
+
     c->read->handler = ngx_http_request_handler;
     c->write->handler = ngx_http_request_handler;
     r->read_event_handler = ngx_http_block_reading;
@@ -3428,6 +3436,60 @@
     return NGX_OK;
 }
 
+#if (NGX_STAT_EXTENDED)
+
+static inline void
+update_request_cnt(worker_score *worker, conn_score *cs, uint32_t sec)
+{
+    uint32_t  index;
+
+    index = sec & RECENT_MASK;
+    if (sec == worker->recent_request_cnt[index].time) {
+        worker->recent_request_cnt[index].cnt += 1;
+    }
+    else {
+        worker->recent_request_cnt[index].time = sec;
+        worker->recent_request_cnt[index].cnt = 1;
+    }
+}
+
+static inline  ngx_msec_int_t
+get_response_time(ngx_time_t *tp, ngx_http_request_t *r)
+{
+    ngx_msec_int_t  ms;
+
+    ms = (ngx_msec_int_t) ((tp->sec - r->start_sec) * 1000 + (tp->msec - r->start_msec));
+    ms = ( 0 <= ms ) ? ms : 0;
+
+    return ms;
+}
+
+
+static inline  ngx_msec_int_t
+get_proxy_response_time(ngx_http_request_t  *r)
+{
+    ngx_http_upstream_state_t  *state;
+    ngx_msec_int_t  ms = -1;
+    ngx_uint_t  i;
+
+    if (NULL != r->upstream_states && 0 < r->upstream_states->nelts)
+    {
+        state = r->upstream_states->elts;
+        for (i = 0; i < r->upstream_states->nelts; i++)
+        {
+            if (0 != state[i].status)
+            {
+                ms = state [i].response_time;
+                ms = (0 <= ms) ? ms : 0;
+                break;
+            }
+        }
+    }
+
+    return ms;
+}
+
+#endif
 
 static void
 ngx_http_close_request(ngx_http_request_t *r, ngx_int_t rc)
@@ -3472,6 +3534,11 @@
     ngx_http_log_ctx_t        *ctx;
     ngx_http_core_loc_conf_t  *clcf;
 
+#if (NGX_STAT_EXTENDED)
+    conn_score  *cs = r->connection->cs;
+    ngx_time_t  *tp ;
+#endif
+
     log = r->connection->log;
 
     ngx_log_debug0(NGX_LOG_DEBUG_HTTP, log, 0, "http close request");
@@ -3492,7 +3559,7 @@
         cln = cln->next;
     }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
 
     if (r->stat_reading) {
         (void) ngx_atomic_fetch_add(ngx_stat_reading, -1);
@@ -3510,6 +3577,47 @@
 
     log->action = "logging request";
 
+#if (NGX_STAT_EXTENDED)
+    my_worker->mode = SERVER_LOGGING ;
+
+    if (0 < r->headers_in.server.len &&  NULL != r->request_line.data) {
+
+        tp = ngx_timeofday();
+
+        if (my_worker->last_used != tp->sec)
+            times(&(my_worker->times ));
+
+        my_worker->last_used = tp->sec;
+        cs->last_used = tp->sec;
+
+        cs->response_time = get_response_time(tp, r);
+        cs->upstream_response_time = get_proxy_response_time(r);
+
+        my_worker->bytes_sent += r->connection->sent;
+        cs->bytes_sent = r->connection->sent;
+
+        my_worker->access_count++;
+
+        update_request_cnt(my_worker, cs, (uint32_t) tp->sec);
+
+        cs->status = r->err_status ? r->err_status : r->headers_out.status;
+
+        if (NULL != r->connection->addr_text.data) {
+            ngx_cpystrn(cs->client, r->connection->addr_text.data,
+                        r->connection->addr_text.len >= SCORE__CLIENT_LEN ?
+                        SCORE__CLIENT_LEN : (r->connection->addr_text.len + 1));
+        }
+        if (0 < r->headers_in.server.len) {
+            ngx_cpystrn(cs->vhost, r->headers_in.server.data, SCORE__VHOST_LEN <= r->headers_in.server.len ?
+                        SCORE__VHOST_LEN : (r->headers_in.server.len + 1));
+        }
+        if (NULL != r->request_line.data) {
+            ngx_cpystrn(cs->request, r->request_line.data, r->request_line.len >= SCORE__REQUEST_LEN ?
+                        SCORE__REQUEST_LEN : (r->request_line.len + 1));
+        }
+    }
+#endif
+
     ngx_http_log_request(r);
 
     log->action = "closing request";
@@ -3547,6 +3655,10 @@
     r->pool = NULL;
 
     ngx_destroy_pool(pool);
+
+#if (NGX_STAT_EXTENDED)
+    my_worker->mode = SERVER_READY;
+#endif
 }
 
 
@@ -3587,10 +3699,18 @@
 
 #endif
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+    if ( 0 < my_worker->active_conn )
+        my_worker->active_conn -= 1 ;
+    else
+        ngx_log_error( NGX_LOG_ALERT, c->log, 0,
+                       "ngx_http_close_connection(): active_conn is zero" ) ;
+#endif
+
     c->destroyed = 1;
 
     pool = c->pool;
diff -urN a/src/os/unix/ngx_process.c b/src/os/unix/ngx_process.c
--- a/src/os/unix/ngx_process.c	2018-12-04 23:52:24.000000000 +0900
+++ b/src/os/unix/ngx_process.c	2019-04-26 15:03:40.188987062 +0900
@@ -35,6 +35,10 @@
 ngx_int_t        ngx_last_process;
 ngx_process_t    ngx_processes[NGX_MAX_PROCESSES];
 
+#if (NGX_STAT_EXTENDED)
+ngx_int_t        old_ngx_last_process = 0;
+ngx_process_t    old_ngx_processes[NGX_MAX_PROCESSES];
+#endif
 
 ngx_signal_t  signals[] = {
     { ngx_signal_value(NGX_RECONFIGURE_SIGNAL),
diff -urN a/src/os/unix/ngx_process.h b/src/os/unix/ngx_process.h
--- a/src/os/unix/ngx_process.h	2018-12-04 23:52:24.000000000 +0900
+++ b/src/os/unix/ngx_process.h	2019-04-26 15:03:40.189987066 +0900
@@ -86,5 +86,9 @@
 extern ngx_int_t      ngx_last_process;
 extern ngx_process_t  ngx_processes[NGX_MAX_PROCESSES];
 
+#if (NGX_STAT_EXTENDED)
+extern ngx_int_t      old_ngx_last_process;
+extern ngx_process_t  old_ngx_processes[NGX_MAX_PROCESSES];
+#endif
 
 #endif /* _NGX_PROCESS_H_INCLUDED_ */
diff -urN a/src/os/unix/ngx_process_cycle.c b/src/os/unix/ngx_process_cycle.c
--- a/src/os/unix/ngx_process_cycle.c	2018-12-04 23:52:24.000000000 +0900
+++ b/src/os/unix/ngx_process_cycle.c	2019-04-26 15:03:40.188987062 +0900
@@ -232,6 +232,15 @@
 
             ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0, "reconfiguring");
 
+#if (NGX_STAT_EXTENDED)
+            old_ngx_last_process = ngx_last_process;
+            for (i = 0; i < old_ngx_last_process; i++)
+                old_ngx_processes[i] = ngx_processes[i];
+
+            ngx_last_process = 0;
+            ngx_process_slot = 0;
+#endif
+
             cycle = ngx_init_cycle(cycle);
             if (cycle == NULL) {
                 cycle = (ngx_cycle_t *) ngx_cycle;
@@ -489,6 +498,72 @@
 
     ch.fd = -1;
 
+#if (NGX_STAT_EXTENDED)
+    if ( NGX_CMD_QUIT == ch.command && 0 < old_ngx_last_process )
+    {
+        for (i = 0; i < old_ngx_last_process; i++) {
+            ngx_log_debug7(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
+                           "child: %d %P e:%d t:%d d:%d r:%d j:%d",
+                           i,
+                           old_ngx_processes[i].pid,
+                           old_ngx_processes[i].exiting,
+                           old_ngx_processes[i].exited,
+                           old_ngx_processes[i].detached,
+                           old_ngx_processes[i].respawn,
+                           old_ngx_processes[i].just_spawn);
+
+            if (old_ngx_processes[i].detached || old_ngx_processes[i].pid == -1)
+                continue;
+
+            if (old_ngx_processes[i].exiting && signo == ngx_signal_value( NGX_SHUTDOWN_SIGNAL))
+                continue;
+
+            if (ch.command) {
+                if (ngx_write_channel(old_ngx_processes[i].channel[0], &ch, sizeof(ngx_channel_t), cycle->log) == NGX_OK) {
+                    if (signo != ngx_signal_value(NGX_REOPEN_SIGNAL))
+                        old_ngx_processes[i].exiting = 1;
+
+                    continue;
+                }
+            }
+
+            ngx_log_debug2(NGX_LOG_DEBUG_CORE, cycle->log, 0,
+                           "kill (%P, %d)", old_ngx_processes[i].pid, signo);
+
+            if (kill(old_ngx_processes[i].pid, signo) == -1) {
+                err = ngx_errno;
+                ngx_log_error(NGX_LOG_ALERT, cycle->log, err,
+                              "kill(%P, %d) failed", old_ngx_processes[i].pid, signo);
+
+                if (err == NGX_ESRCH) {
+                    old_ngx_processes[i].exited = 1;
+                    old_ngx_processes[i].exiting = 0;
+                    ngx_reap = 1;
+                }
+                continue;
+            }
+
+            if (signo != ngx_signal_value(NGX_REOPEN_SIGNAL))
+                old_ngx_processes[i].exiting = 1;
+        }
+
+        for (i = 0; i < old_ngx_last_process; i++) {
+
+            ngx_close_channel( old_ngx_processes[i].channel, cycle->log ) ;
+
+            old_ngx_processes[i].channel[0] = -1 ;
+            old_ngx_processes[i].channel[1] = -1 ;
+        }
+
+        old_ngx_last_process = -1;
+
+        for (i = 0; i < ngx_last_process; i++) {
+            ngx_processes [i].just_spawn = 0 ;
+        }
+
+        return ;
+    }
+#endif
 
     for (i = 0; i < ngx_last_process; i++) {
 
@@ -736,6 +811,22 @@
 
     ngx_setproctitle("worker process");
 
+#if (NGX_STAT_EXTENDED)
+    {
+        my_worker = (worker_score *) ((char *) workers + WORKER_SCORE_LEN * ngx_process_slot);
+        ngx_time_t  *tp = ngx_timeofday();
+
+        my_worker->last_used = tp->sec;
+        my_worker->pid = ngx_getpid();
+        my_worker->bytes_sent = 0L;
+        my_worker->access_count = 0L;
+        my_worker->active_conn = 0L;
+        my_worker->mode = SERVER_READY;
+
+        times(&my_worker->times);
+    }
+#endif
+
     for ( ;; ) {
 
         if (ngx_exiting) {
diff -urN a/src/stream/ngx_stream_handler.c b/src/stream/ngx_stream_handler.c
--- a/src/stream/ngx_stream_handler.c	2018-12-04 23:52:24.000000000 +0900
+++ b/src/stream/ngx_stream_handler.c	2019-04-26 15:03:40.191987075 +0900
@@ -344,10 +344,18 @@
 
 #endif
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+    if ( 0 < my_worker->active_conn )
+        my_worker->active_conn -= 1 ;
+    else
+        ngx_log_error( NGX_LOG_ALERT, c->log, 0,
+                       "ngx_stream_close_connection(): active_conn is zero" ) ;
+#endif
+
     pool = c->pool;
 
     ngx_close_connection(c);
